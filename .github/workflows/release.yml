name: Release & Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run typecheck
          NODE_ENV=test npm test -- --coverage
          npm run build

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Noveum/noveum-trace-ts
          files: ./coverage/lcov.info
          flags: release-validation
          name: codecov-release

      - name: Validate package.json
        run: |
          echo "Validating package.json..."
          node -e "
            const pkg = require('./package.json');
            if (!pkg.name || !pkg.version || !pkg.description) {
              throw new Error('Missing required package.json fields');
            }
            if (!pkg.main || !pkg.module || !pkg.types) {
              throw new Error('Missing build output references');
            }
            console.log('✅ package.json validation passed');
          "

      - name: Check changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "⚠️ No CHANGELOG.md found"
          else
            echo "✅ CHANGELOG.md exists"
          fi

  # Job 2: Build & Test Package
  build-package:
    name: Build & Test Package
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Pack package
        run: npm pack

      - name: Test package installation
        run: |
          # Test installation in a clean environment
          PACKAGE_FILE=$(ls -1 *.tgz | head -n1)
          echo "Testing package: $PACKAGE_FILE"

          mkdir test-install && cd test-install
          npm init -y
          npm install ../$PACKAGE_FILE

          # Test importing the package
          node -e "
            console.log('Testing package import...');
            const pkg = require('@noveum/trace');
            console.log('Available exports:', Object.keys(pkg));
            if (!pkg.NoveumClient) {
              throw new Error('NoveumClient not exported');
            }
            console.log('✅ Package installation and import test passed');
          "

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'

  # Job 3: Security & Compliance Check
  security-check:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..."

          # Check for common sensitive files that shouldn't be published
          SENSITIVE_FILES=(
            ".env"
            ".env.local"
            ".env.production"
            "*.key"
            "*.pem"
            "secrets.json"
            "credentials.json"
          )

          for pattern in "${SENSITIVE_FILES[@]}"; do
            if find . -name "$pattern" -not -path "./node_modules/*" | grep -q .; then
              echo "❌ Found sensitive files matching: $pattern"
              find . -name "$pattern" -not -path "./node_modules/*"
              exit 1
            fi
          done

          echo "✅ No sensitive files found"

      - name: Validate license
        run: |
          if [ ! -f LICENSE ]; then
            echo "⚠️ No LICENSE file found"
          else
            echo "✅ LICENSE file exists"
          fi

  # Job 4: Publish to NPM (only on release)
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build-package, security-check]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download package artifact
        uses: actions/download-artifact@v5
        with:
          name: npm-package
          path: .

      - name: Get package info
        id: package
        run: |
          PACKAGE_FILE=$(ls -1 *.tgz | head -n1)
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "file=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version already exists
        run: |
          if npm view ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} version 2>/dev/null; then
            echo "❌ Version ${{ steps.package.outputs.version }} already exists on NPM"
            exit 1
          else
            echo "✅ Version ${{ steps.package.outputs.version }} is new"
          fi

      - name: Publish to NPM (dry run)
        run: |
          echo "🧪 Testing publish (dry run)..."
          npm publish ${{ steps.package.outputs.file }} --dry-run
          echo "✅ Dry run successful"

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing to NPM..."
          npm publish ${{ steps.package.outputs.file }}
          echo "✅ Published ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} to NPM"

      - name: Verify NPM publication
        run: |
          echo "🔍 Verifying NPM publication..."
          sleep 30  # Wait for NPM to update

          npm view ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} version
          echo "✅ Package verified on NPM"

  # Job 5: Create GitHub Release (workflow_dispatch only)
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-package, security-check]
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Download package artifact
        uses: actions/download-artifact@v5
        with:
          name: npm-package
          path: .

      - name: Bump version
        id: version
        run: |
          echo "Bumping version..."
          NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Generate changelog entry
        id: changelog
        run: |
          echo "Generating changelog..."

          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)")
          fi

          # Create changelog content
          cat > release_notes.md << EOF
          ## What's Changed

          $COMMITS

          ## Installation

          \`\`\`bash
          npm install @noveum/trace@${{ steps.version.outputs.new_version }}
          \`\`\`

          ## Documentation

          See the [README](README.md) for usage examples and API documentation.
          EOF

      - name: Commit version bump
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: Get package info
        id: package
        run: |
          PACKAGE_FILE=$(ls -1 *.tgz | head -n1)
          echo "file=$PACKAGE_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: ${{ steps.version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.event.inputs.release_type, 'pre') }}
          files: |
            ${{ steps.package.outputs.file }}

  # Job 6: Post-Release Notifications
  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [publish-npm]
    if: always() && (needs.publish-npm.result == 'success' || needs.github-release.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package info
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Success notification
        run: |
          echo "🎉 Release completed successfully!"
          echo "Package: ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}"
          echo "NPM: https://www.npmjs.com/package/${{ steps.package.outputs.name }}"
          echo "GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ steps.package.outputs.version }}"

  # Final job: Release success
  release-success:
    name: Release Pipeline Success
    runs-on: ubuntu-latest
    needs: [validate, build-package, security-check, publish-npm]
    if: always()

    steps:
      - name: Check release status
        run: |
          echo "🎯 Release Pipeline Results"
          echo "=========================="
          echo "Validation: ${{ needs.validate.result }}"
          echo "Build Package: ${{ needs.build-package.result }}"
          echo "Security Check: ${{ needs.security-check.result }}"
          echo "NPM Publish: ${{ needs.publish-npm.result }}"

          if [[ "${{ needs.validate.result }}" == "success" && 
                "${{ needs.build-package.result }}" == "success" && 
                "${{ needs.security-check.result }}" == "success" ]]; then
            echo ""
            echo "🎉 Release pipeline successful!"
            
            if [[ "${{ needs.publish-npm.result }}" == "success" ]]; then
              echo "✅ Package published to NPM"
            else
              echo "⚠️ Package not published (skipped or failed)"
            fi
          else
            echo ""
            echo "❌ Release pipeline failed. Check the results above."
            exit 1
          fi
