name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: PR Metadata Validation
  pr-metadata:
    name: PR Metadata Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Validate PR title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          echo "üîç Validating PR title: \"$PR_TITLE\""

          # Check if title follows conventional commit format
          TITLE="$PR_TITLE"

          # Define valid prefixes
          VALID_PREFIXES=("feat" "fix" "docs" "style" "refactor" "test" "chore" "ci" "perf" "build")

          VALID=false
          for prefix in "${VALID_PREFIXES[@]}"; do
            if [[ $TITLE =~ ^$prefix(\(.+\))?:\ .+ ]]; then
              VALID=true
              echo "‚úÖ Title follows conventional commit format with '$prefix' type"
              break
            fi
          done

          if [ "$VALID" = false ]; then
            echo "‚ùå PR title doesn't follow conventional commit format"
            echo "Expected format: type(scope): description"
            echo "Valid types: ${VALID_PREFIXES[*]}"
            echo "Examples:"
            echo "  feat: add new tracing feature"
            echo "  fix(client): resolve connection timeout issue"
            echo "  docs: update API documentation"
            exit 1
          fi

      - name: Validate PR description
        env:
          PR_DESCRIPTION: ${{ github.event.pull_request.body }}
        run: |
          echo "üìù Validating PR description..."

          DESCRIPTION="$PR_DESCRIPTION"

          if [ -z "$DESCRIPTION" ] || [ ${#DESCRIPTION} -lt 20 ]; then
            echo "‚ùå PR description is too short or missing"
            echo "Please provide a meaningful description of your changes"
            exit 1
          fi

          # Check for required sections (basic check)
          if [[ $DESCRIPTION == *"## "* ]]; then
            echo "‚úÖ PR description has good structure"
          else
            echo "‚ö†Ô∏è Consider adding sections to your PR description (## What, ## Why, ## How)"
          fi

      - name: Check PR size
        env:
          CHANGED_FILES: ${{ github.event.pull_request.changed_files }}
          ADDITIONS: ${{ github.event.pull_request.additions }}
          DELETIONS: ${{ github.event.pull_request.deletions }}
        run: |
          echo "üìä Analyzing PR size..."

          echo "Files changed: $CHANGED_FILES"
          echo "Lines added: $ADDITIONS"
          echo "Lines deleted: $DELETIONS"

          # Warn if PR is very large
          if [ $CHANGED_FILES -gt 20 ] || [ $ADDITIONS -gt 1000 ]; then
            echo "‚ö†Ô∏è This is a large PR. Consider breaking it into smaller ones."
            echo "Large PRs are harder to review and more likely to introduce bugs."
          else
            echo "‚úÖ PR size looks reasonable"
          fi

  # Job 2: Code Quality Checks
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          echo "üîç Running ESLint..."
          npm run lint || {
            echo "‚ùå Linting failed. Please fix the issues and push again."
            echo "Run 'npm run lint:fix' to automatically fix some issues."
            exit 1
          }

      - name: Check code formatting
        run: |
          echo "üé® Checking code formatting..."
          npm run format:check || {
            echo "‚ùå Code formatting issues found."
            echo "Run 'npm run format' to fix formatting issues."
            exit 1
          }

      - name: Type checking
        run: |
          echo "üîß Running TypeScript type checking..."
          npm run typecheck || {
            echo "‚ùå TypeScript errors found. Please fix them before merging."
            exit 1
          }

  # Job 3: Test Coverage Analysis
  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run base coverage
        run: |
          NODE_ENV=test npm test -- --coverage --reporter=json > base-coverage.json 2>/dev/null || echo "Base coverage failed"

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install dependencies (PR)
        run: npm ci

      - name: Run PR coverage
        run: |
          NODE_ENV=test npm test -- --coverage --reporter=json > pr-coverage.json 2>/dev/null || echo "PR coverage failed"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: Noveum/noveum-trace-typescript
          files: ./coverage/lcov.info
          flags: pr-validation
          name: codecov-pr

      - name: Compare coverage
        run: |
          echo "üìä Coverage Analysis"
          echo "==================="

          if [ -f coverage/lcov.info ]; then
            echo "‚úÖ Coverage report generated for PR"
            
            # Extract coverage from lcov.info using awk
            COVERAGE_DATA=$(awk -F: '/^SF:/ {files++} /^DA:/ {split($2,a,","); total++; if(a[2]>0) covered++} END {if(total>0) printf "%.1f", (covered/total)*100; else print "0"}' coverage/lcov.info)
            echo "Current coverage: ${COVERAGE_DATA}%"
            
            if [ "${COVERAGE_DATA%.*}" -lt 70 ]; then
              echo "‚ö†Ô∏è Coverage is below 70%. Consider adding more tests."
            else
              echo "‚úÖ Good test coverage!"
            fi
          else
            echo "‚ö†Ô∏è No coverage report found"
          fi

  # Job 4: Breaking Changes Detection
  breaking-changes:
    name: Breaking Changes Detection
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for breaking changes
        run: |
          echo "üîç Checking for potential breaking changes..."

          # Check if main export file has changes
          if ! diff -q base/src/index.ts pr/src/index.ts >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Changes detected in src/index.ts (main exports)"
            echo "Please verify that no public APIs have been removed or changed"
          fi

          # Check package.json for version changes
          BASE_VERSION=$(cd base && node -p "require('./package.json').version" 2>/dev/null || echo "unknown")
          PR_VERSION=$(cd pr && node -p "require('./package.json').version" 2>/dev/null || echo "unknown")

          if [ "$BASE_VERSION" != "$PR_VERSION" ]; then
            echo "üì¶ Version change detected: $BASE_VERSION ‚Üí $PR_VERSION"
            
            # Check if it's a major version bump
            if [[ $PR_VERSION == *.0.0 ]] && [[ $BASE_VERSION != *.0.0 ]]; then
              echo "üö® Major version bump detected - this indicates breaking changes"
            fi
          fi

          # Check for interface changes
          INTERFACE_CHANGES=$(diff -r base/src pr/src | grep -E "interface|type.*=" | head -10 || echo "")
          if [ -n "$INTERFACE_CHANGES" ]; then
            echo "‚ö†Ô∏è Type/interface changes detected:"
            echo "$INTERFACE_CHANGES"
            echo "Please verify backward compatibility"
          fi

  # Job 5: Performance Impact Check
  performance-impact:
    name: Performance Impact Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build and check bundle size
        run: |
          echo "üì¶ Checking bundle size impact..."
          npm run build

          # Check main bundle size (portable across OS)
          BUNDLE_SIZE=$(wc -c < dist/index.mjs)
          echo "Main bundle size: $BUNDLE_SIZE bytes"

          # Set reasonable limits
          if [ $BUNDLE_SIZE -gt 512000 ]; then  # 500KB
            echo "‚ö†Ô∏è Bundle size is larger than 500KB"
            echo "Consider code splitting or reducing dependencies"
          else
            echo "‚úÖ Bundle size looks good"
          fi

          # List all files and their sizes
          echo ""
          echo "üìä All bundle files:"
          ls -lh dist/ | awk '{print $5 "\t" $9}'

      - name: Performance smoke test
        run: |
          echo "üöÄ Running performance smoke test..."

          cat > pr-perf-test.js << 'EOF'
          const { NoveumClient } = require('./dist/index.js');

          async function perfTest() {
            const client = new NoveumClient({
              apiKey: 'test-key',
              project: 'pr-perf-test',
              enabled: false
            });

            console.time('Create 100 traces');
            const promises = [];
            for (let i = 0; i < 100; i++) {
              promises.push(client.createTrace(`trace-${i}`, {
                attributes: { index: i }
              }));
            }
            await Promise.all(promises);
            console.timeEnd('Create 100 traces');
            
            await client.shutdown();
          }

          perfTest().catch(console.error);
          EOF

          node pr-perf-test.js

  # Job 6: Security Review
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found"
            echo "Please review and fix security issues"
          }

      - name: Check for sensitive data
        run: |
          echo "üîç Scanning for potential sensitive data..."

          # Check for common sensitive patterns
          SENSITIVE_PATTERNS=(
            "password"
            "secret"
            "private.*key"
            "api.*key"
            "token"
            "credential"
          )

          FOUND_ISSUES=false

          for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if grep -ri "$pattern" src/ --include="*.ts" --exclude-dir=node_modules | grep -v "test\|spec\|example"; then
              echo "‚ö†Ô∏è Found potential sensitive data pattern: $pattern"
              FOUND_ISSUES=true
            fi
          done

          if [ "$FOUND_ISSUES" = false ]; then
            echo "‚úÖ No obvious sensitive data patterns found"
          else
            echo "‚ö†Ô∏è Please review the flagged items to ensure no sensitive data is exposed"
          fi
